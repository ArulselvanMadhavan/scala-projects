import fp.functional_data_structures.List

object test{
    def main(args:Array[String]):Unit = {
        println(List.sum(List(2,3,4)))
        println(List.product(List(4,5,6)))
        val after_1:List[Int] = List.tail(List(1,2)).getOrElse(List())
        println(s"After Ã§alling tail once $after_1")
        val after_2:List[Int] = List.tail(after_1).getOrElse(List())
        println(s"After calling tail twice $after_2")
        val h1:List[Int] = List.setHead(after_2, 100)
        println(s"After calling setHead once $h1")
        val h2:List[Int] = List.setHead(List(3,4,5,56), 200)
        println(s"After calling setHead on a new list $h2")
        val d1:List[Int] = List.drop(List(2,3,4,5,6,7,7,8,8), 4)
        println(s"After dropping $d1")
        val d2:List[Int] = List.drop(d1, 10)
        println(s"After dropping $d2")
        val isTwo = (x:Int) => (x == 2)
        val dw1 = List.dropWhile(List(2,2,5,2,2,3,4,2,5), isTwo)
        println(dw1)
        val i1 = List.init(List(2,3,4,5,6))
        println(s"Init result $i1")
        val fr1 = List.foldRight(List(2,3,4,5,6), 1)((x,y) => x * y)
        println(s"foldRight product $fr1")
        val len1 = List.foldRight(List(2,3,3,3,3,3), 0)((x, y) => 1 + y)
        println(s"Length of list $len1")
        val fl1 = List.foldLeft(List(2,3,4,5,6), 1)((x,y) => x * y)
        println(s"foldLeft product $fl1")
        val sum_fl = List.foldLeft(List(2,3,4,5,5), 0)((x,y) => x + y)
        println(s"foldLeft sum $sum_fl")
        val prod_fl = List.foldLeft(List(3,3,3,3,3), 1)((x,y) => x * y)
        println(s"foldLeft prod $prod_fl")
        val rev = List.reverse(List(4,4,5,6,1,2,3))
        println(s"Reversed list $rev")
        val app1 = List.append(List(3,4,5,6,7), List(8,9,10))
        println(s"Append $app1")
        val row1 = List(1,2,3)
        val row2 = List(4,5,6)
        val row3 = List(7,8,9)
        val ll = List(row1, row2, row3)
        val conc = List.concatenate(ll)
        println(s"Concatenated list $conc")
        val ad1 = List.add1(List(3,3,3,3,3))
        println(s"Add1 $ad1")
        val ds1 = List.dToString(List(4.0, 2.3, 33.9))
        println(s"Double to String $ds1")
        val ad2 = List.map(ad1)((x) => 1+x)
        println(s"Add 1 using map $ad2")
        val fil1 = List.filter(List(2,4,5,6,7,8))((x) => x % 2 == 0)
        println(s"Filter check $fil1")
        val fm1 = List.flatMap(List(1,2,3,4,5,6))((i) => List(i, i))
        println(s"Flat map $fm1")
        val fil_fm1 = List.filterViaFlatMap(List(1,2,3,4,5,6,7))((x) => x % 2 == 0)
        println(s"filter via flatmap $fil_fm1")
        val a2l = List.add2Lists(List(1,2,3), List(4,5,6))
        println(s"Add 2 lists $a2l")
        val zw1 = List.zipWith(List(1, 2, 3), List(4, 5))((x, y) => x * y)
        println(s"Zip with $zw1")
        val sub1 = List.hasSubsequence(List(1,2,3,4), List(1,1,3,4))
        println(s"Has a subsequence $sub1")
    }
}
